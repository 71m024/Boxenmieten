<?php

namespace Boxenmieten\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function getPosts($limit = 10, $offset = 1)
    {
        $qb = $this->createQueryBuilder('p')
                   ->select('p')
                   ->addOrderBy('p.created', 'DESC')
                   ->setFirstResult($offset)
                   ->setMaxResults($limit);

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function getPostsForTag($id, $limit = 10, $offset = 1)
    {
        $qb = $this->createQueryBuilder('p')
                   ->select('p')
                   ->join('p.tags', 't')->addSelect('t')
                   ->where('t.id = :tagId')
                   ->setParameter("tagId", $id)
                   ->addOrderBy('p.created', 'DESC')
                   ->setFirstResult($offset)
                   ->setMaxResults($limit);

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function getPostsForCategory($id, $limit = 10, $offset = 1)
    {
        $qb = $this->createQueryBuilder('p')
                   ->select('p')
                   ->join('p.categories', 'c')->addSelect('c')
                   ->where('c.id = :catId')
                   ->setParameter("catId", $id)
                   ->addOrderBy('p.created', 'DESC')
                   ->setFirstResult($offset)
                   ->setMaxResults($limit);

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function getNumPostsForTag($id) {
         $qb = $this->createQueryBuilder('p')
                   ->join('p.tags', 't')->addSelect('t')
                   ->where('t.id = :tagId')
                   ->setParameter("tagId", $id)
                   ->select('count(p)');

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
    
    public function getNumPostsForCategory($id) {
         $qb = $this->createQueryBuilder('p')
                   ->join('p.categories', 'c')->addSelect('c')
                   ->where('c.id = :catId')
                   ->setParameter("catId", $id)
                   ->select('count(p)');

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
    
    public function getNumPosts() {
         $qb = $this->createQueryBuilder('p')
                   ->select('count(p)');

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
    
    public function getTags()
    {
        $blogTags = $this->createQueryBuilder('b')
                         ->select('b.tags')
                         ->getQuery()
                         ->getResult();

        $tags = array();
        foreach ($blogTags as $blogTag)
        {
            $tags = array_merge(explode(",", $blogTag['tags']), $tags);
        }

        foreach ($tags as &$tag)
        {
            $tag = trim($tag);
        }

        return $tags;
    }

    public function getTagWeights($tags)
    {
        $tagWeights = array();
        if (empty($tags)) {
            return $tagWeights;
        }

        foreach ($tags as $tag)
        {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
        }
        // Shuffle the tags
        uksort($tagWeights, function() {
            return rand() > rand();
        });

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;
        foreach ($tagWeights as &$tag)
        {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;
    }
}